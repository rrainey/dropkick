function M = QToMatrix(Q)
  M = [ ...
    (Q(1)^2 + Q(2)^2 - Q(3)^2 - Q(4)^2), ...
    2 * ((Q(2)*Q(3)) + Q(1) * Q(4)), ...
    2 * ((Q(2)*Q(4)) - Q(1) * Q(3)) ; ...
    2 * ((Q(2)*Q(3)) - Q(1) * Q(4)), ...
    (Q(1)^2 + Q(3)^2 - Q(2)^2 - Q(4)^2), ...
    2 * ((Q(3)*Q(4)) + Q(1) * Q(2)); ...
    2 * ((Q(2)*Q(4)) + Q(1) * Q(3)), ...
    2 * ((Q(3)*Q(4)) - Q(1) * Q(2)), ...
    (Q(1)^2 + Q(4)^2 - Q(2)^2 - Q(3)^2) ...
  ];
end

function [phi, theta, psi] = QToEuler(Q)
  phi = atan(2 * (Q(3) * Q(4) + Q(1) * Q(2)) / (Q(1)^2 +Q(4)^2 -Q(2)^2-Q(3)^2));
  theta = asin( -2 * (Q(2) * Q(4) - Q(1) * Q(3)));
  psi = atan(2 * (Q(2) * Q(3) + Q(1) * Q(4)) / (Q(1)^2 +Q(2)^2 - Q(3)^2 - Q(4)^2));
end

function Q = EulerToQ(phi, theta, psi)
  Q = [ 
      cos(psi/2) * cos(theta/2) * cos(phi/2) + sin(psi/2) * sin(theta/2) * sin(phi/2); ...
      cos(psi/2) * cos(theta/2) * sin(phi/2) - sin(psi/2) * sin(theta/2) * cos(phi/2); ...
      cos(psi/2) * sin(theta/2) * cos(phi/2) + sin(psi/2) * cos(theta/2) * sin(phi/2); ...
    - cos(psi/2) * sin(theta/2) * sin(phi/2) + sin(psi/2) * cos(theta/2) * cos(phi/2); ...
    ];
end

IMUtoBody = [ 0 0 1 ; 1 0 0 ; 0 1 0 ];